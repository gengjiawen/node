import sys
import re

index = sys.argv.index('--target');
inputs = sys.argv[1:index]
outputs = sys.argv[index + 1:]
assert len(inputs) == len(outputs)

IS_MAC = sys.platform.startswith('darwin')
IS_LINUX = sys.platform.startswith('linux')
IS_WINDOWS = sys.platform.startswith('win32')
IS_BSD = 'bsd' in sys.platform

vars = {
  'prefix': '@prefix@',
  'PACKAGE': '@PACKAGE@',
  'PACKAGE_NAME': '@PACKAGE_NAME@',
  'PACKAGE_VERSION': '@PACKAGE_VERSION@',
  'PACKAGE_URL': '@PACKAGE_URL@',
  'PACKAGE_BUGREPORT': '@PACKAGE_BUGREPORT@',
  'PACKAGE_STRING': '@PACKAGE_STRING@',
  'PACKAGE_TARNAME': '@PACKAGE_TARNAME@',
  'GETDNS_COMPILATION_COMMENT': '',
  'GETDNS_VERSION': '1.6.0',
  'GETDNS_NUMERIC_VERSION': '0x01060000',
  'GETDNS_API_VERSION': 'December 2015',
  'API_VERSION': 'December 2015',
  'API_NUMERIC_VERSION': '0x07df0c00',
  'HAVE_ASSERT_H': True,
  'HAVE_INTTYPES_H': True,
  'HAVE_LIMITS_H': True,
  'HAVE_SYS_LIMITS_H': False,
  'HAVE_STDARG_H': True,
  'HAVE_STDINT_H': True,
  'HAVE_STDIO_H': True,
  'HAVE_STDLIB_H': True,
  'HAVE_STRING_H': True,
  'HAVE_TIME_H': True,
  'HAVE_UNISTD_H': True,
  'HAVE_FCNTL_H': True,
  'HAVE_SIGNAL_H': True,
  'HAVE_SYS_POLL_H': True,
  'HAVE_POLL_H': True,
  'HAVE_RESOURCE_H': False,
  'HAVE_SYS_TYPES_H': True,
  'HAVE_SYS_STAT_H': True,
  'HAVE_ENDIAN_H': True,
  'HAVE_NETDB_H': True,
  'HAVE_ARPA_INET_H': True,
  'HAVE_NETINET_IN_H': True,
  'HAVE_NETINET_TCP_H': True,
  'HAVE_SYS_SELECT_H': True,
  'HAVE_SYS_SOCKET_H': True,
  'HAVE_SYS_SYSCTL_H': True,
  'HAVE_SYS_TIME_H': True,
  'HAVE_SYS_WAIT_H': True,
  'HAVE_WINDOWS_H': IS_WINDOWS,
  'HAVE_WINSOCK_H': IS_WINDOWS,
  'HAVE_WINSOCK2_H': IS_WINDOWS,
  'HAVE_WS2TCPIP_H': IS_WINDOWS,
  'GETDNS_ON_WINDOWS': IS_WINDOWS,
  'USE_WINSOCK': IS_WINDOWS,
  'HAVE_SSL': True,
  'USE_DANESSL': False,
  'HAVE_OPENSSL_SSL_H': True,
  'HAVE_OPENSSL_EVP_H': True,
  'HAVE_OPENSSL_ERR_H': True,
  'HAVE_OPENSSL_RAND_H': True,
  'HAVE_OPENSSL_CONF_H': True,
  'HAVE_OPENSSL_ENGINE_H': True,
  'HAVE_DSA_SIG_SET0': True,
  'HAVE_DSA_SET0_PQG': True,
  'HAVE_DSA_SET0_KEY': True,
  'HAVE_RSA_SET0_KEY': True,
  'HAVE_EVP_MD5': True,
  'HAVE_EVP_SHA1': True,
  'HAVE_EVP_SHA224': True,
  'HAVE_EVP_SHA256': True,
  'HAVE_EVP_SHA384': True,
  'HAVE_EVP_SHA512': True,
  'HAVE_EVP_DSS1': False,
  'HAVE_EVP_DIGESTVERIFY': True,
  'HAVE_EVP_MD_CTX_NEW': True,
  'HAVE_HMAC_CTX_NEW': True,
  'HAVE_NETTLE_GET_SECP_256R1': False,
  'HAVE_NETTLE_GET_SECP_384R1': False,
  'HAVE_TLS_CLIENT_METHOD': True,
  'HAVE_OPENSSL_VERSION_NUM': True,
  'HAVE_OPENSSL_VERSION': True,
  'HAVE_SSL_CTX_DANE_ENABLE': True,
  'HAVE_SSL_CTX_SET_CIPHERSUITS': True,
  'HAVE_SSL_SET_CIPHERSUITES': True,
  'HAVE_SSL_SET_CIPHERSUITS': True,
  'HAVE_OPENSSL_INIT_CRYPTO': True,
  'HAVE_SSL_DANE_ENABLE': True,
  'HAVE_SSL_CTX_SET_CIPHERSUITES': True,
  'HAVE_DECL_SSL_CTX_SET1_CURVES_LIST': True,
  'HAVE_DECL_SSL_SET1_CURVES_LIST': True,
  'HAVE_DECL_SSL_SET_MIN_PROTO_VERSION': True,
  'HAVE_X509_GET_NOTAFTER': True,
  'HAVE_X509_GET0_NOTAFTER': True,
  'HAVE_PTHREAD': not IS_WINDOWS,
  'HAVE_WINDOWS_THREADS': IS_WINDOWS,
  'RUNSTATEDIR': False,
  'TRUST_ANCHOR_FILE': '@PATH_TRUST_ANCHOR_FILE@',
  'PATH_TRUST_ANCHOR_FILE': '/usr/local/etc/unbound/getdns-root.key',
  'GETDNS_FN_RESOLVCONF': '@PATH_RESOLVCONF@',
  'PATH_RESOLVCONF': '/etc/resolv.conf',
  'GETDNS_FN_HOSTS': '@PATH_HOSTS@',
  'PATH_HOSTS': '/etc/hosts',
  'DNSSEC_ROADBLOCK_AVOIDANCE': True,
  'HAVE_MDNS_SUPPORT': False,
  'STUB_NATIVE_DNSSEC': True,
  'MAXIMUM_UPSTREAM_OPTION_SPACE': '3000',
  'EDNS_PADDING_OPCODE': '12',
  'MAX_CNAME_REFERRALS': '100',
  'DRAFT_RRTYPES': '1',
  'EDNS_COOKIES': True,
  'EDNS_COOKIE_OPCODE': '10',
  'EDNS_COOKIE_ROLLOVER_TIME': '(24*60*60)',
  'UDP_MAX_BACKOFF': '@MAX_UDP_BACKOFF@',
  'MAX_UDP_BACKOFF': '1000',
  'HAVE_DECL_GETENTROPY': True,
  'HAVE_DECL_INET_PTON': True,
  'HAVE_DECL_INET_NTOP': True,
  'HAVE_WIN_DECL_INET_PTON': False,
  'HAVE_WIN_DECL_INET_NTOP': False,
  'HAVE_DECL_MKSTEMP': True,
  'HAVE_DECL_SIGEMPTYSET': True,
  'HAVE_DECL_SIGFILLSET': True,
  'HAVE_DECL_SIGADDSET': True,
  'HAVE_DECL_STRPTIME': True,
  'HAVE_DECL_TCP_FASTOPEN': True,
  'HAVE_DECL_TCP_FASTOPEN_CONNECT': True,
  'HAVE_DECL_MSG_FASTOPEN': True,
  'HAVE_FCNTL': True,
  'HAVE_GETTIMEOFDAY': True,
  'HAVE_IOCTLSOCKET': False,
  'HAVE_SIGEMPTYSET': True,
  'HAVE_SIGFILLSET': True,
  'HAVE_SIGADDSET': True,
  'HAVE_STRPTIME': True,
  'HAVE_SIGSET_T': True,
  'HAVE__SIGSET_T': False,
  'HAVE_BSD_STDLIB_H': IS_BSD,
  'HAVE_BSD_STRING_H': IS_BSD,
  'HAVE_DECL_STRLCPY': IS_BSD,
  'HAVE_DECL_ARC4RANDOM': IS_BSD,
  'HAVE_DECL_ARC4RANDOM_UNIFORM': IS_BSD,
  'HAVE_BSD_DECL_STRLCPY': IS_BSD,
  'HAVE_BSD_DECL_ARC4RANDOM': IS_BSD,
  'HAVE_BSD_DECL_ARC4RANDOM_UNIFORM': IS_BSD,
  'HAVE_STRLCPY': IS_BSD,
  'HAVE_ARC4RANDOM': IS_BSD,
  'HAVE_ARC4RANDOM_UNIFORM': IS_BSD,
  'HAVE_LIBUNBOUND': False,
  'HAVE_UNBOUND_EVENT_H': False,
  'HAVE_UNBOUND_EVENT_API': False,
  'HAVE_UB_CTX_SET_STUB': True,
  'HAVE_LIBIDN': False,
  'HAVE_LIBIDN2': False,
  'HAVE_NETTLE': False,
  'HAVE_NETTLE_DSA_COMPAT_H': False,
  'HAVE_NETTLE_EDDSA_H': False,
  'HAVE_EVENT2_EVENT_H': False,
  'HAVE_EVENT_BASE_NEW': False,
  'HAVE_EVENT_BASE_FREE': False,
  'DEFAULT_EVENTLOOP': 'select_eventloop',
  'USE_POLL_DEFAULT_EVENTLOOP': False,
  'STRPTIME_WORKS': True,
  'FD_SETSIZE': '',
  'REQ_DEBUG': False,
  'SCHED_DEBUG': False,
  'STUB_DEBUG': False,
  'DAEMON_DEBUG': False,
  'SEC_DEBUG': False,
  'SERVER_DEBUG': False,
  'ANCHOR_DEBUG': False,
  'KEEP_CONNECTIONS_OPEN_DEBUG': False,
  'USE_SHA1': True,
  'USE_SHA2': True,
  'USE_GOST': True,
  'USE_ECDSA': True,
  'USE_DSA': True,
  'USE_ED25519': True,
  'USE_ED448': True,
  'USE_OSX_TCP_FASTOPEN': IS_MAC,
  'HAVE_NEW_UV_TIMER_CB': True,
  'HAVE_TARGET_ENDIANNESS': True,
  'TARGET_IS_BIG_ENDIAN': sys.byteorder == 'big',
  'HAVE___FUNC__': False,
}

def replace_cmakedefine(s):
  if s.startswith('#cmakedefine'):
    name = re.split('\s+', s)[1]
    if vars[name] != False:
      return re.sub('#cmakedefine', '#define', s)
    return ''
  return s

def replace_cmakevar_match(match):
  return vars[match.group(1)]

def replace_cmakevar(s):
  return re.sub(r'@(\w+?)@', replace_cmakevar_match, s)

for i in range(len(inputs)):
  with open(inputs[i]) as input_file:
    input = input_file.read()

  input = '\n'.join(map(replace_cmakedefine, input.splitlines()))
  input = replace_cmakevar(input)

  with open(outputs[i], 'w') as output_file:
    output_file.write(input)
